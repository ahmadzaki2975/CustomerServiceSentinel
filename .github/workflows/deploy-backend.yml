name: Deploy Backend

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y sshpass openssh-client

    - name: Set up SSH for VM
      env:
        SSH_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: SSH into VM and run deploy script
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        GH_SSH_PRIVATE_KEY: ${{ secrets.GH_SSH_PRIVATE_KEY }}
      run: |
        sshpass -p ${{ secrets.VM_SSH_PASSPHRASE }} ssh -o StrictHostKeyChecking=no -A $SSH_USER@$SSH_HOST << 'EOF'
          cd ~/repositories/CustomerServiceSentinel/backend

          # Pull newest changes
          git pull origin main

          # Build the Docker image
          docker build -t flask-app .

          # Stop and remove the existing container if it is running
          docker ps -a -q --filter "name=flask-app" | grep -q . && docker stop flask-app && docker rm -f flask-app

          # Check if any process is using port 5000 and stop it
          fuser -k 5000/tcp

          # Run the new container
          docker run -d --name flask-app -p 5000:5000 --env-file .env flask-app
        EOF
